// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestFiotec.Data;

#nullable disable

namespace TestFiotec.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestFiotec.Model.DadosEpidemiologicos", b =>
                {
                    b.Property<long>("DadosEpidemiologicosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DadosEpidemiologicosId"));

                    b.Property<double?>("CasConf")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casconf");

                    b.Property<double?>("CasProv")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casprov");

                    b.Property<double?>("CasProvEst")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casprov_est");

                    b.Property<double?>("CasProvEstMax")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casprov_est_max");

                    b.Property<double?>("CasProvEstMin")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casprov_est_min");

                    b.Property<double?>("Casos")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casos");

                    b.Property<double?>("CasosEst")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casos_est");

                    b.Property<double?>("CasosEstMax")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casos_est_max");

                    b.Property<double?>("CasosEstMin")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "casos_est_min");

                    b.Property<long>("DataIniSE")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "data_iniSE");

                    b.Property<long>("IdConsulta")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("LocalidadeId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Localidade_id");

                    b.Property<double?>("Nivel")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "nivel");

                    b.Property<double?>("NivelInc")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "nivel_inc");

                    b.Property<double?>("NotifAccumYear")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "notif_accum_year");

                    b.Property<double?>("PInc100k")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "p_inc100k");

                    b.Property<double?>("PRt1")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "p_rt1");

                    b.Property<double?>("Pop")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "pop");

                    b.Property<double?>("Receptivo")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "receptivo");

                    b.Property<double?>("Rt")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "Rt");

                    b.Property<double?>("SE")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "SE");

                    b.Property<int?>("SolicitacaoId")
                        .HasColumnType("int");

                    b.Property<double?>("TempMax")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "tempmax");

                    b.Property<double?>("TempMed")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "tempmed");

                    b.Property<double?>("TempMin")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "tempmin");

                    b.Property<double?>("Transmissao")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "transmissao");

                    b.Property<double?>("Tweet")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "tweet");

                    b.Property<double?>("UmidMax")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "umidmax");

                    b.Property<double?>("UmidMed")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "umidmed");

                    b.Property<double?>("UmidMin")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "umidmin");

                    b.Property<string>("VersaoModelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "versao_modelo");

                    b.HasKey("DadosEpidemiologicosId");

                    b.HasIndex("SolicitacaoId");

                    b.ToTable("DadosEpidemiologicos");
                });

            modelBuilder.Entity("TestFiotec.Model.Solicitacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Arbovirose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoIBGE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemanaFim")
                        .HasColumnType("int");

                    b.Property<int>("SemanaInicio")
                        .HasColumnType("int");

                    b.Property<int>("SolicitanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolicitanteId");

                    b.ToTable("Solicitacoes");
                });

            modelBuilder.Entity("TestFiotec.Model.Solicitante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Solicitantes");
                });

            modelBuilder.Entity("TestFiotec.Model.DadosEpidemiologicos", b =>
                {
                    b.HasOne("TestFiotec.Model.Solicitacao", "Solicitacao")
                        .WithMany("DadosEpidemiologicos")
                        .HasForeignKey("SolicitacaoId");

                    b.Navigation("Solicitacao");
                });

            modelBuilder.Entity("TestFiotec.Model.Solicitacao", b =>
                {
                    b.HasOne("TestFiotec.Model.Solicitante", "Solicitante")
                        .WithMany()
                        .HasForeignKey("SolicitanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitante");
                });

            modelBuilder.Entity("TestFiotec.Model.Solicitacao", b =>
                {
                    b.Navigation("DadosEpidemiologicos");
                });
#pragma warning restore 612, 618
        }
    }
}
